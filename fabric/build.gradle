import org.mtr.mapping.BuildTools

plugins {
	id "java"
	id "fabric-loom" version "+" apply false
}

subprojects {
	apply plugin: "java"
	apply plugin: "fabric-loom"

	final BuildTools buildTools = new BuildTools(project, rootProject.getProperties().getOrDefault("generate", "").toString())

	loom {
		accessWidenerPath = file("src/main/resources/minecraft-mappings.accesswidener")
	}

	dependencies {
		implementation project(":common")
		minecraft "com.mojang:minecraft:${buildTools.minecraftVersion}"
		mappings "net.fabricmc:yarn:${buildTools.getYarnVersion()}:v2"
		modImplementation "net.fabricmc:fabric-loader:${buildTools.getFabricVersion()}"
		modImplementation "net.fabricmc.fabric-api:fabric-api:${buildTools.getFabricApiVersion()}"
		compileOnly "com.google.code.findbugs:jsr305:+"
		testImplementation "org.junit.jupiter:junit-jupiter-api:+"
		testImplementation "com.google.code.gson:gson:+"
		testImplementation "org.reflections:reflections:+"
		testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:+"
	}

	java {
		toolchain {
			languageVersion.set(JavaLanguageVersion.of(buildTools.javaLanguageVersion))
		}
		withSourcesJar()
		withJavadocJar()
	}

	remapJar {
		doLast {
			buildTools.copyBuildFile(true)
			buildTools.copyBuildFile(false)
		}
	}

	test {
		useJUnitPlatform()
		testLogging { showStandardStreams = true }
	}

	tasks.withType(AbstractArchiveTask).configureEach {
		preserveFileTimestamps = false
		reproducibleFileOrder = true
	}

	tasks.withType(Javadoc).tap {
		configureEach { javadoc.options.addStringOption("Xdoclint:none", "-quiet") }
	}
}